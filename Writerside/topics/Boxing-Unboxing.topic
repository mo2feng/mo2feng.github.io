<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       id="Boxing-Unboxing" title="自动装拆箱">

    <title>
        自动装拆箱
    </title>
    <chapter title="自动拆装箱" id="auto-boxing-and-unboxing-title">
        <chapter title="基本数据类型" id="basic-data-types">
            <tip>
                <p>主要介绍 Java 中的自动拆箱与自动装箱的有关知识。</p>
            </tip>
            <p>基本类型，或者叫做内置类型，是 Java 中不同于类(Class)的特殊类型。它们是我们编程中使用最频繁的类型。</p>
            <p>Java 是一种强类型语言，第一次申明变量必须说明数据类型，第一次变量赋值称为变量的初始化。</p>
            <p>Java 基本类型共有八种，基本类型可以分为三类：</p>
            <tip>
                <p>字符类型 <code>char</code></p>
                <p>布尔类型 <code>boolean</code></p>
                <p>数值类型
                    <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>。
                </p>
            </tip>
            <p>Java 中的数值类型不存在无符号的，它们的取值范围是固定的，不会随着机器硬件环境或者操作系统的改变而改变。</p>
            <p>实际上，Java 中还存在另外一种基本类型 <code>void</code>，它也有对应的包装类 <code>java.lang.Void</code>，不过我们无法直接对它们进行操作。
            </p>
            <chapter title="基本数据类型有什么好处" id="advantage-of-basic-type">
                <p>我们都知道在 Java 语言中，<code>new</code> 一个对象是存储在堆里的，我们通过栈中的引用来使用这些对象；所以，对象本身来说是比较消耗资源的。
                </p>
                <p>对于经常用到的类型，如 int 等，如果我们每次使用这种变量的时候都需要 new 一个 Java 对象的话，就会比较笨重。所以，和
                    C++ 一样，Java 提供了基本数据类型，这种数据的变量不需要使用 new
                    创建，他们不会在堆上创建，而是直接在栈内存中存储，因此会更加高效。</p>
            </chapter>
            <chapter title="整型的取值范围" id="scope-of-int">
                <p>Java 中的整型主要包含 <code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>这四种，表示的数字范围也是从小到大的，之所以表示范围不同主要和他们存储数据时所占的字节数有关。
                </p>
                <p>先来个简答的科普，1 字节= 8 位（bit）。Java 中的整型属于有符号数。</p>
                <p>先来看计算中 8 bit 可以表示的数字：</p>

                <code-block>最小值：10000000 （-128）(-2^7)
                    最大值：01111111（127）(2^7-1)
                </code-block>
                <p>整型的这几个类型中，</p>
                <list>
                    <li>
                        <p>byte：byte 用 1 个字节来存储，范围为 -128(-2
                            <format style="superscript">7) 到 127(2</format>
                            7-1)，在变量初始化的时候，byte 类型的默认值为 0。
                        </p>
                    </li>
                    <li>
                        <p>short：short 用 2 个字节存储，范围为 -32,768(-2
                            <format style="superscript">15) 到 32,767(2</format>
                            15-1)，在变量初始化的时候，short 类型的默认值为 0，一般情况下，因为 Java 本身转型的原因，可以直接写为
                            0。
                        </p>
                    </li>
                    <li>
                        <p>int：int 用 4 个字节存储，范围为 -2,147,483,648(-2
                            <format style="superscript">31) 到 2,147,483,647(2</format>
                            31-1)，在变量初始化的时候，int 类型的默认值为 0。
                        </p>
                    </li>
                    <li>
                        <p>long：long 用 8 个字节存储，范围为 -9,223,372,036,854,775,808(-2
                            <format style="superscript">63) 到 9,223,372,036, 854,775,807(2</format>
                            63-1)，在变量初始化的时候，long 类型的默认值为 0L 或 0l，也可直接写为 0。
                        </p>
                    </li>
                </list>
            </chapter>
            <chapter title="超出范围怎么办">
                <p>
                    上面说过了，整型中，每个类型都有一定的表示范围，但是，在程序中有些计算会导致超出表示范围，即溢出。如以下代码：</p>

                <code-block lang="java">
                    int i = Integer.MAX_VALUE;
                    int j = Integer.MAX_VALUE;

                    int k = i + j;
                    System.out.println(&quot;i (&quot; + i + &quot;) + j (&quot; + j + &quot;) = k (&quot; + k + &quot;)&quot;);
                </code-block>
                <p>输出结果：i (2147483647) + j (2147483647) = k (-2)</p>
                <p>
                    <control>这就是发生了溢出，溢出的时候并不会抛异常，也没有任何提示。</control>
                    所以，在程序中，使用同类型的数据进行运算的时候，
                    <control>一定要注意数据溢出的问题。</control>
                </p>
            </chapter>
        </chapter>
        <chapter title="包装类型" id="boxing-type">
            <p>Java 语言是一个面向对象的语言，但是 Java
                中的基本数据类型却是不面向对象的，这在实际使用时存在很多的不便，为了解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八个和基本数据类型对应的类统称为包装类(Wrapper
                Class)。</p>
            <p>包装类均位于 <code>java.lang</code> 包，包装类和基本数据类型的对应关系如下表所示</p>
            <table>
                <tr>
                    <td>基本数据类型</td>
                    <td>包装类</td>
                </tr>
                <tr>
                    <td>byte</td>
                    <td>Byte</td>
                </tr>
                <tr>
                    <td>boolean</td>
                    <td>Boolean</td>
                </tr>
                <tr>
                    <td>short</td>
                    <td>Short</td>
                </tr>
                <tr>
                    <td>char</td>
                    <td>Character</td>
                </tr>
                <tr>
                    <td>int</td>
                    <td>Integer</td>
                </tr>
                <tr>
                    <td>long</td>
                    <td>Long</td>
                </tr>
                <tr>
                    <td>float</td>
                    <td>Float</td>
                </tr>
                <tr>
                    <td>double</td>
                    <td>Double</td>
                </tr>
            </table>
            <p>在这八个类名中，除了 Integer 和 Character
                类以后，其它六个类的类名和基本数据类型一致，只是类名的第一个字母大写即可。</p>
            <chapter title="为什么需要包装类" id="why-need-boxing-class">
                <p>很多人会有疑问，既然 Java 中为了提高效率，提供了八种基本数据类型，为什么还要提供包装类呢？</p>
                <p>这个问题，其实前面已经有了答案，因为 Java 是一种面向对象语言，很多地方都需要使用对象而不是基本数据类型。比如，在集合类中，我们是无法将
                    int 、double 等类型放进去的。因为集合的容器要求元素是 Object 类型。</p>
                <p>
                    为了让基本类型也具有对象的特征，就出现了包装类型，它相当于将基本类型“包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。</p>
            </chapter>
        </chapter>
        <chapter title="拆箱与装箱" id="boxing-and-unboxing">
            <p>那么，有了基本数据类型和包装类，肯定有些时候要在他们之间进行转换。比如把一个基本数据类型的 int 转换成一个包装类型的
                Integer 对象。</p>
            <p>我们认为包装类是对基本类型的包装，所以，把基本数据类型转换成包装类的过程就是打包装，英文对应于
                boxing，中文翻译为装箱。</p>
            <p>反之，把包装类转换成基本数据类型的过程就是拆包装，英文对应于 unboxing，中文翻译为拆箱。</p>
            <p>在 Java SE5 之前，要进行装箱，可以通过以下代码：</p>

            <code-block lang="java">
                Integer i = new Integer(10);
            </code-block>
        </chapter>
        <chapter title="自动拆箱与自动装箱" id="auto-boxing-and-unboxing">
            <p>在 Java SE5 中，为了减少开发人员的工作，Java 提供了自动拆箱与自动装箱功能。</p>
            <p>自动装箱: 就是将基本数据类型自动转换成对应的包装类。</p>
            <p>自动拆箱：就是将包装类自动转换成对应的基本数据类型。</p>

            <code-block lang="java">
                Integer i = 10; //自动装箱
                int b = i; //自动拆箱
            </code-block>
            <p><code>Integer i=10</code> 可以替代 <code>Integer i = new Integer(10);</code>，这就是因为 Java
                帮我们提供了自动装箱的功能，不需要开发者手动去 new 一个 Integer 对象。</p>
        </chapter>
        <chapter title="自动装箱与自动拆箱的实现原理" id="">
            <p>既然 Java 提供了自动拆装箱的能力，那么，我们就来看一下，到底是什么原理，Java 是如何实现的自动拆装箱功能。</p>
            <p>我们有以下自动拆装箱的代码：</p>

            <code-block lang="java">
                public static void main(String[]args){
                Integer integer=1; //装箱
                int i=integer; //拆箱
                }
            </code-block>
            <p>对以上代码进行反编译后可以得到以下代码：</p>

            <code-block lang="java">
                public static void main(String[]args){
                Integer integer=Integer.valueOf(1);
                int i=integer.intValue();
                }
            </code-block>
            <p>从上面反编译后的代码可以看出，int 的自动装箱都是通过 <code>Integer.valueOf()</code> 方法来实现的，Integer
                的自动拆箱都是通过 <code>integer.intValue</code> 来实现的。如果读者感兴趣，可以试着将八种类型都反编译一遍
                ，你会发现以下规律：</p>
            <tip>
                <p>自动装箱都是通过包装类的 <code>valueOf()</code> 方法来实现的.自动拆箱都是通过包装类对象的 <code>xxxValue()</code>
                    来实现的。</p>
            </tip>
        </chapter>
        <chapter title="哪些地方会自动拆装箱">
            <p>我们了解过原理之后，在来看一下，什么情况下，Java
                会帮我们进行自动拆装箱。前面提到的变量的初始化和赋值的场景就不介绍了，那是最简单的也最容易理解的。</p>
            <p>我们主要来看一下，那些可能被忽略的场景。</p>
            <chapter title="场景一、将基本数据类型放入集合类">
                <p>我们知道，Java 中的集合类只能接收对象类型，那么以下代码为什么会不报错呢？</p>

                <code-block lang="java">
                    List&lt;Integer&gt; li = new ArrayList&lt;&gt;();
                    for (int i = 1; i &lt; 50; i ++){
                    li.add(i);
                    }
                </code-block>
                <p>将上面代码进行反编译，可以得到以下代码：</p>

                <code-block lang="java">
                    List&lt;Integer&gt; li = new ArrayList&lt;&gt;();
                    for (int i = 1; i &lt; 50; i += 2){
                    li.add(Integer.valueOf(i));
                    }
                </code-block>
                <p>以上，我们可以得出结论，当我们把基本数据类型放入集合类中的时候，会进行自动装箱。</p>
            </chapter>
            <chapter title="场景二、包装类型和基本类型的大小比较" id="chapter2">
                <p>有没有人想过，当我们对 Integer
                    对象与基本类型进行大小比较的时候，实际上比较的是什么内容呢？看以下代码：</p>

                <code-block lang="java">
                    Integer a = 1;
                    System.out.println(a == 1 ? &quot;等于&quot; : &quot;不等于&quot;);
                    Boolean bool = false;
                    System.out.println(bool ? &quot;真&quot; : &quot;假&quot;);
                </code-block>
                <p>对以上代码进行反编译，得到以下代码：</p>

                <code-block lang="java">
                    Integer a = 1;
                    System.out.println(a.intValue() == 1 ? &quot;等于&quot; : &quot;不等于&quot;);
                    Boolean bool = false;
                    System.out.println(bool.booleanValue ? &quot;真&quot; : &quot;假&quot;);
                </code-block>
                <p>可以看到，包装类与基本数据类型进行比较运算，是先将包装类进行拆箱成基本数据类型，然后进行比较的。</p>
            </chapter>
            <chapter title="场景三、包装类型的运算" id="chapter3">
                <p>有没有人想过，当我们对 Integer 对象进行四则运算的时候，是如何进行的呢？看以下代码：</p>

                <code-block lang="java">
                    Integer i = 10;
                    Integer j = 20;

                    System.out.println(i+j);
                </code-block>
                <p>反编译后代码如下：</p>

                <code-block lang="java">
                    Integer i = Integer.valueOf(10);
                    Integer j = Integer.valueOf(20);
                    System.out.println(i.intValue() + j.intValue());
                </code-block>
                <p>我们发现，两个包装类型之间的运算，会被自动拆箱成基本类型进行。</p>
            </chapter>
            <chapter title="场景四、三目运算符的使用" id="chapter4">
                <p>这是很多人不知道的一个场景，作者也是一次线上的血淋淋的 Bug
                    发生后才了解到的一种案例。看一个简单的三目运算符的代码：</p>

                <code-block lang="java">
                    boolean flag = true;
                    Integer i = 0;
                    int j = 1;
                    int k = flag ? i : j;
                </code-block>
                <p>很多人不知道，其实在 <code>int k = flag ? i : j;</code> 这一行，会发生自动拆箱（ JDK1.8 之前，详见：<a
                        href="https://www.hollischuang.com/archives/4749">《阿里巴巴Java开发手册-泰山版》提到的三目运算符的空指针问题到底是个怎么回事？</a>
                    ）。</p>
                <p>反编译后代码如下：</p>

                <code-block lang="java">
                    boolean flag = true;
                    Integer i = Integer.valueOf(0);
                    int j = 1;
                    int k = flag ? i.intValue() : j;
                    System.out.println(k);
                </code-block>
                <p>
                    这其实是三目运算符的语法规范。当第二，第三位操作数分别为基本类型和对象时，其中的对象就会拆箱为基本类型进行操作。</p>
                <p>因为例子中，<code>flag ? i : j;</code> 片段中，第二段的 i 是一个包装类型的对象，而第三段的 j
                    是一个基本类型，所以会对包装类进行自动拆箱。如果这个时候 i 的值为 <code>null</code>，那么就会发生 NPE。（<a
                            href="http://www.hollischuang.com/archives/435">自动拆箱导致空指针异常</a>）</p>
            </chapter>
            <chapter title="场景五、函数参数与返回值" id="chapter5">
                <p>这个比较容易理解，直接上代码了：</p>

                <code-block lang="java">
                    //自动拆箱
                    public int getNum1(Integer num) {
                    return num;
                    }
                    //自动装箱
                    public Integer getNum2(int num) {
                    return num;
                    }
                </code-block>
            </chapter>
        </chapter>
        <chapter title="自动拆装箱与缓存">
            <p>Java SE 的自动拆装箱还提供了一个和缓存有关的功能，我们先来看以下代码，猜测一下输出结果：</p>

            <code-block lang="java">
                public static void main(String... strings) {

                Integer integer1 = 3;
                Integer integer2 = 3;

                if (integer1 == integer2)
                System.out.println(&quot;integer1 == integer2&quot;);
                else
                System.out.println(&quot;integer1 != integer2&quot;);

                Integer integer3 = 300;
                Integer integer4 = 300;

                if (integer3 == integer4)
                System.out.println(&quot;integer3 == integer4&quot;);
                else
                System.out.println(&quot;integer3 != integer4&quot;);
                }
            </code-block>
            <p>我们普遍认为上面的两个判断的结果都是 false。虽然比较的值是相等的，但是由于比较的是对象，而对象的引用不一样，所以会认为两个
                if 判断都是 false 的。在 Java 中，<code>==</code> 比较的是对象引用，而 <code>equals</code>
                比较的是值。所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回 false。奇怪的是，这里两个类似的
                if 条件判断返回不同的布尔值。</p>
            <p>上面这段代码真正的输出结果：</p>

            <code-block>integer1 == integer2
                integer3 != integer4
            </code-block>
            <p>原因就和 Integer 中的缓存机制有关。在 Java 5 中，在 Integer
                的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。</p>
            <tip>
                <p>适用于整数值区间 -128 至 +127。</p>
                <p>只适用于自动装箱。使用构造函数创建对象不适用。</p>
            </tip>
            <p>具体的代码实现可以阅读<a href="http://www.hollischuang.com/archives/1174">Java中整型的缓存机制</a>一文，这里不再阐述。
            </p>
            <p>我们只需要知道，当需要进行自动装箱时，如果数字在 -128 至 127
                之间时，会直接使用缓存中的对象，而不是重新创建一个对象。</p>
            <p>其中的 Javadoc 详细的说明了缓存支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 <code>-XX:AutoBoxCacheMax=size</code>
                修改。</p>
            <p>实际上这个功能在 Java 5 中引入的时候,范围是固定的 -128 至 +127。后来在 Java 6 中，可以通过 <code>java.lang.Integer.IntegerCache.high</code>
                设置最大值。</p>
            <p>这使我们可以根据应用程序的实际情况灵活地调整来提高性能。到底是什么原因选择这个 -128 到 127
                范围呢？因为这个范围的数字是最被广泛使用的。 在程序中，第一次使用 Integer
                的时候也需要一定的额外时间来初始化这个缓存。</p>
            <p>在 Boxing Conversion 部分的 Java 语言规范(JLS)规定如下：</p>
            <p>如果一个变量 p 的值是：</p>
            <list>
                <li>-128 至 127 之间的整数 (§3.10.1)</li>
                <li>true 和 false 的布尔值 (§3.10.3)</li>
                <li><code>\u0000</code> 至 <code>\u007f</code> 之间的字符 (§3.10.4)</li>
            </list>
            <p>范围内的时，将 p 包装成 a 和 b 两个对象时，可以直接使用 a == b 判断 a 和 b 的值是否相等。</p>
        </chapter>
        <chapter title="自动拆装箱带来的问题">
            <p>
                当然，自动拆装箱是一个很好的功能，大大节省了开发人员的精力，不再需要关心到底什么时候需要拆装箱。但是，他也会引入一些问题。</p>
            <tip>
                <p>包装对象的数值比较，不能简单的使用 <code>==</code>，虽然 -128 到 127 之间的数字可以，但是这个范围之外还是需要使用
                    <code>equals</code> 比较。</p>
                <p>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为 null ，那么自动拆箱时就有可能抛出
                    NPE。</p>
                <p>如果一个 for 循环中有大量拆装箱操作，会浪费很多资源。</p>
            </tip>
        </chapter>
        <chapter title="参考资料">
            <p><a href="https://www.jianshu.com/p/cc9312104876">Java 的自动拆装箱</a></p>
            <p>英文原文：<a href="http://www.hollischuang.com/archives/435">Java Integer Cache</a> 翻译地址：<a
                    href="http://www.hollischuang.com/archives/1174">Java中整型的缓存机制</a> 原文作者：<a
                    href="https://www.jianshu.com/p/cc9312104876">Java Papers</a> 翻译作者：<a
                    href="http://www.hollischuang.com">Hollis</a> 转载请注明出处。</p>
            <p>本文将介绍Java中Integer的缓存相关知识。这是在Java
                5中引入的一个有助于节省内存、提高性能的功能。首先看一个使用Integer的示例代码，从中学习其缓存行为。接着我们将为什么这么实现以及他到底是如何实现的。你能猜出下面的Java程序的输出结果吗。如果你的结果和真正结果不一样，那么你就要好好看看本文了。</p>

            <code-block>package com.javapapers.java;

                public class JavaIntegerCache {
                public static void main(String... strings) {

                Integer integer1 = 3;
                Integer integer2 = 3;

                if (integer1 == integer2)
                System.out.println(&quot;integer1 == integer2&quot;);
                else
                System.out.println(&quot;integer1 != integer2&quot;);

                Integer integer3 = 300;
                Integer integer4 = 300;

                if (integer3 == integer4)
                System.out.println(&quot;integer3 == integer4&quot;);
                else
                System.out.println(&quot;integer3 != integer4&quot;);

                }
                }
            </code-block>
            <p>我们普遍认为上面的两个判断的结果都是false。虽然比较的值是相等的，但是由于比较的是对象，而对象的引用不一样，所以会认为两个if判断都是false的。在Java中，<code>==</code>比较的是对象引用，而<code>equals</code>比较的是值。所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回false。奇怪的是，这里两个类似的if条件判断返回不同的布尔值。
            </p>
            <p>上面这段代码真正的输出结果：</p>

            <code-block>integer1 == integer2
                integer3 != integer4
            </code-block>
        </chapter>
    </chapter>


    <chapter title="Java中Integer的缓存实现" id="java-integer">
        <p>在Java
            5中，在Integer的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。</p>
        <tip>
            <p>适用于整数值区间-128 至 +127。</p>
            <p>只适用于自动装箱。使用构造函数创建对象不适用。</p>
        </tip>
        <p>Java的编译器把基本数据类型自动转换成封装类对象的过程叫做<code>自动装箱</code>，相当于使用<code>valueOf</code>方法：
        </p>

        <code-block>Integer a = 10; //this is autoboxing
            Integer b = Integer.valueOf(10); //under the hood
        </code-block>
        <p>现在我们知道了这种机制在源码中哪里使用了，那么接下来我们就看看JDK中的<code>valueOf</code>方法。下面是<code>JDK
            1.8.0 build 25</code>的实现：</p>

        <code-block>/**
            * Returns an {@code Integer} instance representing the specified
            * {@code int} value. If a new {@code Integer} instance is not
            * required, this method should generally be used in preference to
            * the constructor {@link #Integer(int)}, as this method is likely
            * to yield significantly better space and time performance by
            * caching frequently requested values.
            *
            * This method will always cache values in the range -128 to 127,
            * inclusive, and may cache other values outside of this range.
            *
            * @param i an {@code int} value.
            * @return an {@code Integer} instance representing {@code i}.
            * @since 1.5
            */
            public static Integer valueOf(int i) {
            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
            return IntegerCache.cache[i + (-IntegerCache.low)];
            return new Integer(i);
            }
        </code-block>
        <p>在创建对象之前先从IntegerCache.cache中寻找。如果没找到才使用new新建对象。</p>
    </chapter>
    <chapter title="IntegerCache Class" id="integercache-class">
        <p>IntegerCache是Integer类中定义的一个<code>private static</code>的内部类。接下来看看他的定义。</p>

        <code-block> /**
            * Cache to support the object identity semantics of autoboxing for values between
            * -128 and 127 (inclusive) as required by JLS.
            *
            * The cache is initialized on first usage. The size of the cache
            * may be controlled by the {@code -XX:AutoBoxCacheMax=} option.
            * During VM initialization, java.lang.Integer.IntegerCache.high property
            * may be set and saved in the private system properties in the
            * sun.misc.VM class.
            */

            private static class IntegerCache {
            static final int low = -128;
            static final int high;
            static final Integer cache[];

            static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);
            if (integerCacheHighPropValue != null) {
            try {
            int i = parseInt(integerCacheHighPropValue);
            i = Math.max(i, 127);
            // Maximum array size is Integer.MAX_VALUE
            h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
            } catch( NumberFormatException nfe) {
            // If the property cannot be parsed into an int, ignore it.
            }
            }
            high = h;

            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k &lt; cache.length; k++)
            cache[k] = new Integer(j++);

            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high &gt;= 127;
            }

            private IntegerCache() {}
            }
        </code-block>
        <p>
            其中的javadoc详细的说明了缓存支持-128到127之间的自动装箱过程。最大值127可以通过<code>-XX:AutoBoxCacheMax=size</code>修改。
            缓存通过一个for循环实现。从低到高并创建尽可能多的整数并存储在一个整数数组中。这个缓存会在Integer类第一次被使用的时候被初始化出来。以后，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。
        </p>
        <p>实际上这个功能在Java 5中引入的时候,范围是固定的-128 至 +127。后来在Java 6中，可以通过<code>java.lang.Integer.IntegerCache.high</code>设置最大值。这使我们可以根据应用程序的实际情况灵活地调整来提高性能。到底是什么原因选择这个-128到127范围呢？因为这个范围的数字是最被广泛使用的。
            在程序中，第一次使用Integer的时候也需要一定的额外时间来初始化这个缓存。</p>
    </chapter>
    <chapter title="Java语言规范中的缓存行为" id="java">
        <p>在<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.7">Boxing Conversion</a>部分的Java语言规范(JLS)规定如下：
        </p>
        <tip>
            <p>如果一个变量p的值是：</p>
            <p>-128至127之间的整数(§3.10.1)</p>
            <p>true 和 false的布尔值 (§3.10.3)</p>
            <p>‘\u0000’至 ‘\u007f’之间的字符(§3.10.4)</p>
            <p>中时，将p包装成a和b两个对象时，可以直接使用a==b判断a和b的值是否相等。</p>
        </tip>
    </chapter>
    <chapter title="其他缓存的对象">
        <p>这种缓存行为不仅适用于Integer对象。我们针对所有的整数类型的类都有类似的缓存机制。</p>
        <tip>
            <p>有ByteCache用于缓存Byte对象</p>
            <p>有ShortCache用于缓存Short对象</p>
            <p>有LongCache用于缓存Long对象</p>
            <p>有CharacterCache用于缓存Character对象</p>
        </tip>
        <p><code>Byte</code>, <code>Short</code>, <code>Long</code>有固定范围: -128 到 127。对于<code>Character</code>,
            范围是 0 到 127。除了<code>Integer</code>以外，这个范围都不能改变。</p>
        <p>
            在日常开发中，我们会经常要在类中定义布尔类型的变量，比如在给外部系统提供一个RPC接口的时候，我们一般会定义一个字段表示本次请求是否成功的。</p>
        <p>关于这个&quot;本次请求是否成功&quot;的字段的定义，其实是有很多种讲究和坑的，稍有不慎就会掉入坑里，作者在很久之前就遇到过类似的问题，本文就来围绕这个简单分析一下。到底该如何定一个布尔类型的成员变量。</p>
        <p>一般情况下，我们可以有以下四种方式来定义一个布尔类型的成员变量：</p>

        <code-block>boolean success
            boolean isSuccess
            Boolean success
            Boolean isSuccess
        </code-block>
        <p>以上四种定义形式，你日常开发中最常用的是哪种呢？到底哪一种才是正确的使用姿势呢？</p>
        <p>通过观察我们可以发现，前两种和后两种的主要区别是变量的类型不同，前者使用的是boolean，后者使用的是Boolean。</p>
        <p>另外，第一种和第三种在定义变量的时候，变量命名是success，而另外两种使用isSuccess来命名的。</p>
        <p>首先，我们来分析一下，到底应该是用success来命名，还是使用isSuccess更好一点。</p>
        <chapter title="success 还是 isSuccess" id="success-issuccess">
            <p>
                到底应该是用success还是isSuccess来给变量命名呢？从语义上面来讲，两种命名方式都可以讲的通，并且也都没有歧义。那么还有什么原则可以参考来让我们做选择呢。</p>
            <p>在阿里巴巴Java开发手册中关于这一点，有过一个『强制性』规定：</p>
            <p><img src="http://www.hollischuang.com/archives/435" alt="-w656"/>￼</p>
            <p>那么，为什么会有这样的规定呢？我们看一下POJO中布尔类型变量不同的命名有什么区别吧。</p>

            <code-block>class Model1 {
                private Boolean isSuccess;
                public void setSuccess(Boolean success) {
                isSuccess = success;
                }
                public Boolean getSuccess() {
                return isSuccess;
                }
                }

                class Model2 {
                private Boolean success;
                public Boolean getSuccess() {
                return success;
                }
                public void setSuccess(Boolean success) {
                this.success = success;
                }
                }

                class Model3 {
                private boolean isSuccess;
                public boolean isSuccess() {
                return isSuccess;
                }
                public void setSuccess(boolean success) {
                isSuccess = success;
                }
                }

                class Model4 {
                private boolean success;
                public boolean isSuccess() {
                return success;
                }
                public void setSuccess(boolean success) {
                this.success = success;
                }
                }
            </code-block>
            <p>以上代码的setter/getter是使用Intellij IDEA自动生成的，仔细观察以上代码，你会发现以下规律：</p>
            <list>
                <li>基本类型自动生成的getter和setter方法，名称都是<code>isXXX()</code>和<code>setXXX()</code>形式的。</li>
                <li>包装类型自动生成的getter和setter方法，名称都是<code>getXXX()</code>和<code>setXXX()</code>形式的。
                </li>
            </list>
            <p>
                既然，我们已经达成一致共识使用基本类型boolean来定义成员变量了，那么我们再来具体看下Model3和Model4中的setter/getter有何区别。</p>
            <p>我们可以发现，虽然Model3和Model4中的成员变量的名称不同，一个是success，另外一个是isSuccess，但是他们自动生成的getter和setter方法名称都是<code>isSuccess</code>和<code>setSuccess</code>。
            </p>
            <p>
                <control>Java Bean中关于setter/getter的规范</control>
            </p>
            <p>关于Java Bean中的getter/setter方法的定义其实是有明确的规定的，根据<a
                    href="http://www.hollischuang.com/archives/1174">JavaBeans(TM) Specification</a>规定，如果是普通的参数propertyName，要以以下方式定义其setter/getter：
            </p>

            <code-block>public &lt;PropertyType&gt; get&lt;PropertyName&gt;();
                public void set&lt;PropertyName&gt;(&lt;PropertyType&gt; a);
            </code-block>
            <p>但是，布尔类型的变量propertyName则是单独定义的：</p>

            <code-block>public boolean is&lt;PropertyName&gt;();
                public void set&lt;PropertyName&gt;(boolean m);
            </code-block>
            <p><img src="https://www.jianshu.com/p/cc9312104876" alt="-w687"/>￼</p>
            <p>
                通过对照这份JavaBeans规范，我们发现，在Model4中，变量名为isSuccess，如果严格按照规范定义的话，他的getter方法应该叫isIsSuccess。但是很多IDE都会默认生成为isSuccess。</p>
            <p>那这样做会带来什么问题呢。</p>
            <p>在一般情况下，其实是没有影响的。但是有一种特殊情况就会有问题，那就是发生序列化的时候。</p>
            <p>
                <control>序列化带来的影响</control>
            </p>
            <p>关于序列化和反序列化请参考<a href="http://www.hollischuang.com">Java对象的序列化与反序列化</a>。我们这里拿比较常用的JSON序列化来举例，看看看常用的fastJson、jackson和Gson之间有何区别：
            </p>

            <code-block>public class BooleanMainTest {

                public static void main(String[] args) throws IOException {
                //定一个Model3类型
                Model3 model3 = new Model3();
                model3.setSuccess(true);

                //使用fastjson(1.2.16)序列化model3成字符串并输出
                System.out.println(&quot;Serializable Result With fastjson :&quot; + JSON.toJSONString(model3));

                //使用Gson(2.8.5)序列化model3成字符串并输出
                Gson gson =new Gson();
                System.out.println(&quot;Serializable Result With Gson :&quot; +gson.toJson(model3));

                //使用jackson(2.9.7)序列化model3成字符串并输出
                ObjectMapper om = new ObjectMapper();
                System.out.println(&quot;Serializable Result With jackson :&quot; +om.writeValueAsString(model3));
                }

                }

                class Model3 implements Serializable {

                private static final long serialVersionUID = 1836697963736227954L;
                private boolean isSuccess;
                public boolean isSuccess() {
                return isSuccess;
                }
                public void setSuccess(boolean success) {
                isSuccess = success;
                }
                public String getHollis(){
                return &quot;hollischuang&quot;;
                }
                }
            </code-block>
            <p>
                以上代码的Model3中，只有一个成员变量即isSuccess，三个方法，分别是IDE帮我们自动生成的isSuccess和setSuccess，另外一个是作者自己增加的一个符合getter命名规范的方法。</p>
            <p>以上代码输出结果：</p>

            <code-block>Serializable Result With fastjson :{&quot;hollis&quot;:&quot;hollischuang&quot;,&quot;success&quot;:true}
                Serializable Result With Gson :{&quot;isSuccess&quot;:true}
                Serializable Result With jackson :{&quot;success&quot;:true,&quot;hollis&quot;:&quot;hollischuang&quot;}
            </code-block>
            <p>
                在fastjson和jackson的结果中，原来类中的isSuccess字段被序列化成success，并且其中还包含hollis值。而Gson中只有isSuccess字段。</p>
            <p>
                我们可以得出结论：fastjson和jackson在把对象序列化成json字符串的时候，是通过反射遍历出该类中的所有getter方法，得到getHollis和isSuccess，然后根据JavaBeans规则，他会认为这是两个属性hollis和success的值。直接序列化成json:{&quot;hollis&quot;:&quot;hollischuang&quot;,&quot;success&quot;:true}</p>
            <p>
                但是Gson并不是这么做的，他是通过反射遍历该类中的所有属性，并把其值序列化成json:{&quot;isSuccess&quot;:true}</p>
            <p>
                可以看到，由于不同的序列化工具，在进行序列化的时候使用到的策略是不一样的，所以，对于同一个类的同一个对象的序列化结果可能是不同的。</p>
            <p>
                前面提到的关于对getHollis的序列化只是为了说明fastjson、jackson和Gson之间的序列化策略的不同，我们暂且把他放到一边，我们把他从Model3中删除后，重新执行下以上代码，得到结果：</p>

            <code-block>Serializable Result With fastjson :{&quot;success&quot;:true}
                Serializable Result With Gson :{&quot;isSuccess&quot;:true}
                Serializable Result With jackson :{&quot;success&quot;:true}
            </code-block>
            <p>
                现在，不同的序列化框架得到的json内容并不相同，如果对于同一个对象，我使用fastjson进行序列化，再使用Gson反序列化会发生什么？</p>

            <code-block>public class BooleanMainTest {
                public static void main(String[] args) throws IOException {
                Model3 model3 = new Model3();
                model3.setSuccess(true);
                Gson gson =new Gson();
                System.out.println(gson.fromJson(JSON.toJSONString(model3),Model3.class));
                }
                }


                class Model3 implements Serializable {
                private static final long serialVersionUID = 1836697963736227954L;
                private boolean isSuccess;
                public boolean isSuccess() {
                return isSuccess;
                }
                public void setSuccess(boolean success) {
                isSuccess = success;
                }
                @Override
                public String toString() {
                return new StringJoiner(&quot;, &quot;, Model3.class.getSimpleName() + &quot;[&quot;, &quot;]&quot;)
                .add(&quot;isSuccess=&quot; + isSuccess)
                .toString();
                }
                }
            </code-block>
            <p>以上代码，输出结果：</p>

            <code-block>Model3[isSuccess=false]
            </code-block>
            <p>
                这和我们预期的结果完全相反，原因是因为JSON框架通过扫描所有的getter后发现有一个isSuccess方法，然后根据JavaBeans的规范，解析出变量名为success，把model对象序列化城字符串后内容为<code>{&quot;success&quot;:true}</code>。
            </p>
            <p>根据<code>{&quot;success&quot;:true}</code>这个json串，Gson框架在通过解析后，通过反射寻找Model类中的success属性，但是Model类中只有isSuccess属性，所以，最终反序列化后的Model类的对象中，isSuccess则会使用默认值false。
            </p>
            <p>但是，一旦以上代码发生在生产环境，这绝对是一个致命的问题。</p>
            <p>
                所以，作为开发者，我们应该想办法尽量避免这种问题的发生，对于POJO的设计者来说，只需要做简单的一件事就可以解决这个问题了，那就是把isSuccess改为success。这样，该类里面的成员变量时success，getter方法是isSuccess，这是完全符合JavaBeans规范的。无论哪种序列化框架，执行结果都一样。就从源头避免了这个问题。</p>
            <p>引用以下R大关于阿里巴巴Java开发手册这条规定的评价（https://www.zhihu.com/question/55642203 ）：</p>
            <p><img src="http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.7" alt="-w665"/>￼</p>
            <p>所以，
                <control>在定义POJO中的布尔类型的变量时，不要使用isSuccess这种形式，而要直接使用success！</control>
            </p>
        </chapter>
        <chapter title="Boolean还是boolean" id="boolean-boolean">
            <p>前面我们介绍完了在success和isSuccess之间如何选择，那么排除错误答案后，备选项还剩下：</p>

            <code-block>boolean success
                Boolean success
            </code-block>
            <p>那么，到底应该是用Boolean还是boolean来给定一个布尔类型的变量呢？</p>
            <p>我们知道，boolean是基本数据类型，而Boolean是包装类型。关于基本数据类型和包装类之间的关系和区别请参考<a
                    href="http://www.hollischuang.com/archives/2700">一文读懂什么是Java中的自动拆装箱</a></p>
            <p>那么，在定义一个成员变量的时候到底是使用包装类型更好还是使用基本数据类型呢？</p>
            <p>我们来看一段简单的代码</p>

            <code-block> /**
                * @author Hollis
                */
                public class BooleanMainTest {
                public static void main(String[] args) {
                Model model1 = new Model();
                System.out.println(&quot;default model : &quot; + model1);
                }
                }

                class Model {
                /**
                * 定一个Boolean类型的success成员变量
                */
                private Boolean success;
                /**
                * 定一个boolean类型的failure成员变量
                */
                private boolean failure;

                /**
                * 覆盖toString方法，使用Java 8 的StringJoiner
                */
                @Override
                public String toString() {
                return new StringJoiner(&quot;, &quot;, Model.class.getSimpleName() + &quot;[&quot;, &quot;]&quot;)
                .add(&quot;success=&quot; + success)
                .add(&quot;failure=&quot; + failure)
                .toString();
                }
                }
            </code-block>
            <p>以上代码输出结果为：</p>

            <code-block>default model : Model[success=null, failure=false]
            </code-block>
            <p>可以看到，当我们没有设置Model对象的字段的值的时候，Boolean类型的变量会设置默认值为<code>null</code>，而boolean类型的变量会设置默认值为<code>false</code>。
            </p>
            <p>即对象的默认值是<code>null</code>，boolean基本数据类型的默认值是<code>false</code>。</p>
            <p>在阿里巴巴Java开发手册中，对于POJO中如何选择变量的类型也有着一些规定：</p>
            <img src="http://www.hollischuang.com/wp-content/uploads/2018/12/640.jpeg" alt="" width="1080" height="445"
                 class="aligncenter size-full wp-image-3558"/>
            <p>这里建议我们使用包装类型，原因是什么呢？</p>
            <p>举一个扣费的例子，我们做一个扣费系统，扣费时需要从外部的定价系统中读取一个费率的值，我们预期该接口的返回值中会包含一个浮点型的费率字段。当我们取到这个值得时候就使用公式：金额*费率=费用
                进行计算，计算结果进行划扣。</p>
            <p>
                如果由于计费系统异常，他可能会返回个默认值，如果这个字段是Double类型的话，该默认值为null，如果该字段是double类型的话，该默认值为0.0。</p>
            <p>
                如果扣费系统对于该费率返回值没做特殊处理的话，拿到null值进行计算会直接报错，阻断程序。拿到0.0可能就直接进行计算，得出接口为0后进行扣费了。这种异常情况就无法被感知。</p>
            <p>
                这种使用包装类型定义变量的方式，通过异常来阻断程序，进而可以被识别到这种线上问题。如果使用基本数据类型的话，系统可能不会报错，进而认为无异常。</p>
            <p>
                <control>以上，就是建议在POJO和RPC的返回值中使用包装类型的原因。</control>
            </p>
            <p>
                但是关于这一点，作者之前也有过不同的看法：对于布尔类型的变量，我认为可以和其他类型区分开来，作者并不认为使用null进而导致NPE是一种最好的实践。因为布尔类型只有true/false两种值，我们完全可以和外部调用方约定好当返回值为false时的明确语义。</p>
            <p>后来，作者单独和《阿里巴巴Java开发手册》、《码出高效》的作者——孤尽 单独1V1(qing) Battle(jiao)了一下。最终达成共识，还是
                <control>尽量使用包装类型</control>
                。
            </p>
            <p>
                <control>但是，作者还是想强调一个我的观点，尽量避免在你的代码中出现不确定的null值。</control>
            </p>
        </chapter>
        <chapter title="总结">
            <p>
                本文围绕布尔类型的变量定义的类型和命名展开了介绍，最终我们可以得出结论，在定义一个布尔类型的变量，尤其是一个给外部提供的接口返回值时，要使用success来命名，阿里巴巴Java开发手册建议使用封装类来定义POJO和RPC返回值中的变量。但是这不意味着可以随意的使用null，我们还是要尽量避免出现对null的处理的。</p>
        </chapter>
    </chapter>

</topic>