<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       id="Basic-Data-Types" title="基本数据类型">

    <title>
        基本数据类型
    </title>
    <chapter title="基本数据类型" id="basic-types">
        <p>Java中有8种基本数据类型分为三类。</p>
        <note> String不是基本数据类型，是引用类型。</note>
        <chapter title="字符型" id="type-char">
            <p>char</p>
        </chapter>
        <chapter title="布尔型" id="type-bool">
            <p>boolean</p>
        </chapter>
        <chapter title="数值型" id="type-number">
            <p>1.整型：byte、short、int、long</p>
            <p>2.浮点型：float、double</p>
        </chapter>
    </chapter>

    <chapter title="整型的取值范围" id="integer-scope">
        <p>Java中的整型主要包含byte、short、int和long这四种，表示的数字范围也是从小到大的，之所以表示范围不同主要和他们存储数据时所占的字节数有关。</p>
        <p>先来个简单的科普，1字节=8位（bit）。java中的整型属于有符号数。</p>
        <p>先来看计算中8bit可以表示的数字：</p>
        <p>最小值：10000000 （-128）(-2^7)</p>
        <p>最大值：01111111（127）(2^7-1)</p>


        <p>整型的这几个类型中</p>

        　　byte：byte用1个字节来存储，范围为-128(-2^7)到127(2^7-1)，在变量初始化的时候，byte类型的默认值为0。

        　　short：short用2个字节存储，范围为-32,768 (-2^15)到32,767
        (2^15-1)，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。

        　　int：int用4个字节存储，范围为-2,147,483,648 (-2^31)到2,147,483,647 (2^31-1)，在变量初始化的时候，int类型的默认值为0。

        　　long：long用8个字节存储，范围为-9,223,372,036,854,775,808 (-2^63)到9,223,372,036, 854,775,807
        (2^63-1)，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。

        上面说过了，整型中，每个类型都有一定的表示范围，但是，在程序中有些计算会导致超出表示范围，即溢出。如以下代码：
        <code-block lang="java">
            int i = Integer.MAX_VALUE;
            int j = Integer.MAX_VALUE;

            int k = i + j;
            System.out.println("i (" + i + ") + j (" + j + ") = k (" + k + ")");
        </code-block>

        输出结果： <code>i (2147483647) + j (2147483647) = k (-2)</code>

        这就是发生了溢出，溢出的时候并不会抛异常，也没有任何提示。所以，在程序中，使用同类型的数据进行运算的时候，一定要注意数据溢出的问题。

    </chapter>

</topic>