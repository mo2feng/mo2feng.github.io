<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       id="Java-Basic-T" title="Java基础">

    <title>
        Java基础
    </title>
    <link-summary>Java基础知识和学习资料</link-summary>
    <chapter title="基础知识点" id="java-mind" collapsible="true">
        <img style="block" src="Java-Basic-Mind.png" alt="Java基础核心思维导图"/>
    </chapter>
    <chapter title="Java 学习资源" id="java">
        <tabs>
            <tab title="图书">
                <chapter title="Head First Java" id="head-first-java">
                    <img src="head-first-java.png" alt="Head First Java"/>
                    <p>
                        《Head First Java》这本书的内容很轻松有趣,语言比较轻松,能将高深的知识讲的浅显易懂,不会让人觉得枯燥乏味。
                    </p>
                    <p>
                        有很多小伙伴就会问了：这本书适不适合编程新手阅读呢？我个人觉得这本书还是挺适合编程新手阅读的，毕竟是
                        “Head First” 系列。
                    </p>
                </chapter>
            </tab>
            <tab title="视频">
                视频资源小破站上面很多,就推荐几个比较好的
                <p>⭐ <a href="https://www.bilibili.com/video/BV1fh411y7R8">韩顺平 - 零基础 30 天学会 Java </a></p>
                <p>⭐ <a href="https://www.bilibili.com/video/BV1Kb411W75N">宋红康java基础视频</a></p>
            </tab>
            <tab title="在线资料">
                <p>
                    ⭐ <a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程</a> （可以在线练习）
                </p>
                <p>
                    <a href="https://www.liaoxuefeng.com/wiki/1252599548343744">
                        廖雪峰 Java 教程
                    </a>
                </p>
            </tab>
        </tabs>
    </chapter>
    <chapter title="其他开源项目" id="other-open-source-project">
        <p><a href="https://javaguide.cn/">Java面试+学习指南 </a></p>
         <p><a href="https://bugstack.cn/">虫洞栈 </a></p>
    </chapter>
    <chapter title="忽略知识点" id="ignore-knowledge" collapsible="true">
        <deflist sorted="asc">
            <def title="AWT 和 Swing">
                已经 3202 年了，谁还会用 AWT 和 Swing 去开发桌面应用呢？学好后端开发即可，现在是移动互联网时代，基本上都是手机APP、小程序、Web
                网页来做前端了，可以把学习的重心放到 Spring Boot、Spring Cloud、Netty、Dubbo、Zookeeper、Mysql上。
            </def>
            <def title="Applet">
                作为网页插件技术，Applet 压根就没流行起来。
            </def>
            <def title="Struts">
                Struts 是早年一个优秀的 MVC 框架，单从技术的角度来看，还是蛮不错的。但是自从有了 SpringMVC 后，Struts
                就被拍死在沙滩上了。
            </def>
            <def title="Hibernate">2010年时候流行的持久层框架用的正是 Hibernate。但时过境迁，Hibernate
                太重量级了，学习成本太高，取而代之的是轻量级的
                MyBatis。现在有一种说法就是这种对象关系映射太过死板了，不如直接写 SQL 来得灵活，像我很喜欢的一个轻量级框架
                JFinal 就更偏重于在 Java 代码中写 SQL，而不像 MyBatis 和 Hibernate 在 xml 文件中写。
            </def>
            <def title="JSP">
                JSP 在实际开发中，主要是作为 MVC 模型中的V（View）层出现的。它本来是为 Java
                后端程序员开发前端界面而生的，但随着技术的发展，前后端分离的流行，JSP的生命周期已经到头了
            </def>
            <def title="XML">XML 还没有被淘汰，应用的地方还有不少，比如说 Maven 的 pom.xml 文件里就还在用。但是作为一种数据传输格式，它正在被
                JSON 替代。至于复杂的 XML 操作 API（例如 XPath）就完全没必要学习了，如果真的用到了，再去补也不迟。
            </def>
            <def title="JDBC">
                个人不建议再学习偏底层的 JDBC 了，尤其是对于时间宝贵的程序员来说。与其花这点时间，不如把精力投入到 MyBatis
                的学习上。
                当然了，如果真的有时间，真的想打基础，研究一下也无可厚非。深入研究 JDBC，对于理解数据库连接池、事务管理等技术，还是有一定帮助的。
            </def>
            <def title="Servlet">
                虽然 SpringMVC 的底层是以 Servlet 为基础的，是 JavaWeb 容器的基石，但Servlet的确已经过时了。
                如果后面有空余时间的话，想钻的话可以钻一下，对服务器端接收请求数据和向前端发送响应数据时会有一些帮助。
            </def>
        </deflist>
    </chapter>

</topic>